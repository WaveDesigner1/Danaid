/**
 * SecureSessionManager - POPRAWIONA wersja z automatycznƒÖ wymianƒÖ kluczy
 * U≈ºywa UnifiedCrypto i SocketIOHandler z real-time messaging
 */
class SecureSessionManager {
  constructor() {
    this.activeSessions = [];
    this.friends = [];
    this.onlineUsers = [];
    this.messages = {};
    this.currentSessionId = null;
    this.keyExchangeInProgress = new Set(); // NOWE: ≈öledzenie wymian kluczy w toku
    this.user = {
      id: sessionStorage.getItem('user_id'),
      username: sessionStorage.getItem('username'),
      isAdmin: sessionStorage.getItem('is_admin') === 'true',
      isLoggedIn: sessionStorage.getItem('isLoggedIn') === 'true'
    };

    // Inicjalizacja bazy danych
    this.initDatabase();
    this.setupSocketIOHandlers();

    // Callbacks
    this.onMessageReceived = null;
    this.onSessionsUpdated = null;
    this.onFriendsUpdated = null;
    this.onOnlineStatusChanged = null;
    this.onFriendRequestReceived = null;
    
    console.log("SecureSessionManager zainicjalizowany z automatycznƒÖ wymianƒÖ kluczy", this.user);
  }

  /**
   * NOWE: Znajd≈∫ istniejƒÖcƒÖ sesjƒô z u≈ºytkownikiem
   */
  findExistingSession(userId) {
    const existingSession = this.activeSessions.find(session => 
      session.other_user && session.other_user.user_id === parseInt(userId)
    );
    
    if (existingSession) {
      console.log('‚úÖ Znaleziono istniejƒÖcƒÖ sesjƒô:', existingSession.token?.substring(0, 10) + '...');
      return existingSession;
    }
    
    console.log('‚ùå Brak istniejƒÖcej sesji z u≈ºytkownikiem:', userId);
    return null;
  }

  /**
   * POPRAWIONA: Socket.IO handlers z lepszym real-time
   */
  setupSocketIOHandlers() {
    const setupHandlers = () => {
      if (!window.wsHandler) {
        console.error("SocketIOHandler nie dostƒôpny");
        return;
      }
      
      // POPRAWIONA: Obs≈Çuga nowych wiadomo≈õci - automatyczne wy≈õwietlanie
      window.wsHandler.on('new_message', (data) => {
        console.log("üÜï [REAL-TIME] Nowa wiadomo≈õƒá:", data);
        
        try {
          // Sprawd≈∫ czy to nie echo naszej wiadomo≈õci
          if (data.message?.sender_id && 
              parseInt(data.message.sender_id) === parseInt(this.user.id)) {
            console.log("‚Ü©Ô∏è Echo w≈Çasnej wiadomo≈õci - pomijam");
            return;
          }
          
          // AUTOMATYCZNE odszyfrowanie i wy≈õwietlenie
          this.handleIncomingMessage(data.session_token, data.message);
          
        } catch (error) {
          console.error("‚ùå B≈ÇƒÖd real-time wiadomo≈õci:", error);
        }
      });
      
      // DODANE: Obs≈Çuga wymiany kluczy przez Socket.IO
      window.wsHandler.on('session_key_received', (data) => {
        console.log("üîë [REAL-TIME] Otrzymano klucz sesji");
        this.handleReceivedSessionKey(data.session_token, data.encrypted_key);
      });
      
      // DODANE: Potwierdzenie zako≈Ñczenia wymiany kluczy
      window.wsHandler.on('key_exchange_completed', (data) => {
        console.log("‚úÖ [REAL-TIME] Wymiana kluczy zako≈Ñczona");
        this.keyExchangeInProgress.delete(data.session_token);
        this.getActiveSessions();
      });
      
      // Obs≈Çuga aktualizacji sesji
      window.wsHandler.on('session_update', (data) => {
        console.log("Aktualizacja sesji:", data);
        this.getActiveSessions();
      });
      
      // Obs≈Çuga zaprosze≈Ñ do znajomych
      window.wsHandler.on('friend_request', (data) => {
        console.log("Otrzymano zaproszenie do znajomych:", data);
        if (this.onFriendRequestReceived) {
          this.onFriendRequestReceived(data);
        }
      });
      
      // Obs≈Çuga zmian statusu online
      window.wsHandler.on('user_status_change', (data) => {
        const userId = data.user_id;
        const isOnline = data.is_online;
        this.updateOnlineStatus(userId, isOnline);
      });
      
      // Obs≈Çuga listy u≈ºytkownik√≥w online
      window.wsHandler.on('online_users', (data) => {
        this.onlineUsers = data.users || [];
        if (this.onOnlineStatusChanged) {
          this.onOnlineStatusChanged(this.onlineUsers);
        }
      });
      
      console.log("‚úÖ Real-time handlers skonfigurowane");
    };

    if (window.wsHandler) {
      setupHandlers();
    } else {
      setTimeout(setupHandlers, 1000);
    }
  }

/**
   * NOWA: Automatyczna wymiana kluczy w tle
   */
  async startAutomaticKeyExchange(sessionToken, sessionData) {
    try {
      console.log('üöÄ Auto-start wymiany kluczy:', sessionToken?.substring(0, 10) + '...');
      
      // Sprawd≈∫ czy wymiana nie jest ju≈º w toku
      if (this.keyExchangeInProgress.has(sessionToken)) {
        console.log('‚è≥ Wymiana kluczy ju≈º w toku');
        return { success: false, message: 'Wymiana w toku' };
      }
      
      // Dodaj do listy w toku
      this.keyExchangeInProgress.add(sessionToken);
      
      // Sprawd≈∫ czy jeste≈õmy inicjatorem
      if (!sessionData.is_initiator) {
        console.log('‚è≥ Czekam na klucz od inicjatora...');
        return { success: true, message: 'Czekam na klucz' };
      }
      
      console.log('üîë Jestem inicjatorem - generujƒô klucz...');
      
      // Wygeneruj klucz sesji AES
      const sessionKey = await window.unifiedCrypto.generateSessionKey();
      const sessionKeyBase64 = await window.unifiedCrypto.exportSessionKey(sessionKey);
      
      // Zapisz klucz lokalnie
      window.unifiedCrypto.storeSessionKey(sessionToken, sessionKeyBase64);
      
      // Pobierz klucz publiczny odbiorcy
      const recipientResponse = await fetch(`/api/user/${sessionData.other_user.user_id}/public_key`);
      if (!recipientResponse.ok) {
        throw new Error('Nie mo≈ºna pobraƒá klucza publicznego');
      }
      
      const keyData = await recipientResponse.json();
      const recipientPublicKey = await window.unifiedCrypto.importPublicKeyFromPEM(keyData.public_key);
      
      // Zaszyfruj klucz sesji
      const encryptedKey = await window.unifiedCrypto.encryptSessionKey(recipientPublicKey, sessionKey);
      
      // Wy≈õlij na serwer
      const response = await fetch(`/api/session/${sessionToken}/exchange_key`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ encrypted_key: encryptedKey })
      });
      
      if (!response.ok) {
        throw new Error('B≈ÇƒÖd wymiany klucza');
      }
      
      const result = await response.json();
      if (result.status !== 'success') {
        throw new Error(result.message || 'B≈ÇƒÖd API');
      }
      
      console.log('‚úÖ Klucz sesji wys≈Çany automatycznie');
      
      return { success: true, message: 'Klucz wys≈Çany' };
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd auto-wymiany kluczy:', error);
      this.keyExchangeInProgress.delete(sessionToken);
      return { success: false, message: error.message };
    }
  }

  /**
   * POPRAWIONA: Obs≈Çuga otrzymanego klucza (automatyczna)
   */
  async handleReceivedSessionKey(sessionToken, encryptedKey) {
    try {
      console.log('üîë Auto-obs≈Çuga otrzymanego klucza:', sessionToken?.substring(0, 10) + '...');
      
      if (!window.unifiedCrypto.hasPrivateKey()) {
        throw new Error('Brak klucza prywatnego');
      }
      
      // Odszyfruj klucz sesji
      const sessionKeyBase64 = await window.unifiedCrypto.decryptSessionKey(encryptedKey);
      window.unifiedCrypto.storeSessionKey(sessionToken, sessionKeyBase64);
      
      console.log('‚úÖ Klucz automatycznie odszyfrowany');
      
      // Automatyczne potwierdzenie
      const ackResponse = await fetch(`/api/session/${sessionToken}/acknowledge_key`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin'
      });
      
      if (ackResponse.ok) {
        console.log('‚úÖ Klucz automatycznie potwierdzony');
      }
      
      // Usu≈Ñ z listy w toku
      this.keyExchangeInProgress.delete(sessionToken);
      
      // Od≈õwie≈º sesje
      this.getActiveSessions();
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd auto-obs≈Çugi klucza:', error);
      this.keyExchangeInProgress.delete(sessionToken);
    }
  }

  /**
   * NOWA: Obs≈Çuga przychodzƒÖcych wiadomo≈õci z auto-deszyfrowaniem
   */
  async handleIncomingMessage(sessionToken, message) {
    try {
      console.log('üì® Auto-obs≈Çuga wiadomo≈õci:', sessionToken?.substring(0, 10) + '...');
      
      // Sprawd≈∫ czy mamy klucz sesji
      if (!window.unifiedCrypto.hasSessionKey(sessionToken)) {
        console.warn('‚ö†Ô∏è Brak klucza - pr√≥bujƒô pobraƒá...');
        
        const keyResult = await this.retrieveSessionKey(sessionToken);
        if (!keyResult.success) {
          console.error('‚ùå Nie mo≈ºna pobraƒá klucza');
          message.content = '[Nie mo≈ºna odszyfrowaƒá - brak klucza]';
          message.decryption_error = true;
        }
      }
      
      // Automatyczne deszyfrowanie
      if (message.content && message.iv && !message.decryption_error) {
        try {
          const sessionKeyBase64 = window.unifiedCrypto.getSessionKey(sessionToken);
          if (sessionKeyBase64) {
            const sessionKey = await window.unifiedCrypto.importSessionKey(sessionKeyBase64);
            const decryptedContent = await window.unifiedCrypto.decryptMessage(sessionKey, {
              data: message.content,
              iv: message.iv
            });
            
            message.content = decryptedContent;
            console.log('‚úÖ Auto-deszyfrowanie OK');
          }
        } catch (decryptError) {
          console.error('‚ùå B≈ÇƒÖd deszyfrowania:', decryptError);
          message.content = '[B≈ÇƒÖd deszyfrowania]';
          message.decryption_error = true;
        }
      }
      
      // Automatyczne zapisanie
      await this.storeMessage(sessionToken, message);
      
      // AUTOMATYCZNE wy≈õwietlenie w UI
      if (this.onMessageReceived) {
        this.onMessageReceived(sessionToken, message);
      }
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd obs≈Çugi wiadomo≈õci:', error);
    }
  }

  /**
   * POPRAWIONA: Inicjalizacja sesji - sprawdza czy ju≈º istnieje
   */
  async initSession(recipientId) {
    try {
      if (!this.user.id) {
        throw new Error("U≈ºytkownik nie jest zalogowany");
      }
      
      console.log('üîç Sprawdzanie sesji z u≈ºytkownikiem:', recipientId);
      
      // NOWE: Najpierw sprawd≈∫ czy sesja ju≈º istnieje
      const existingSession = this.findExistingSession(recipientId);
      if (existingSession) {
        console.log('‚ôªÔ∏è U≈ºywam istniejƒÖcej sesji:', existingSession.token);
        
        // Sprawd≈∫ czy potrzebuje wymiany kluczy
        if (existingSession.needs_key_exchange && !this.keyExchangeInProgress.has(existingSession.token)) {
          console.log('üîë Automatyczne uruchomienie wymiany kluczy...');
          this.startAutomaticKeyExchange(existingSession.token, existingSession);
        }
        
        return {
          status: 'success',
          session_token: existingSession.token,
          session: existingSession,
          isExisting: true
        };
      }
      
      // Je≈õli nie ma sesji - utw√≥rz nowƒÖ
      console.log('üÜï Tworzenie nowej sesji...');
      const response = await fetch('/api/session/init', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ recipient_id: recipientId })
      });
      
      if (!response.ok) {
        throw new Error(`B≈ÇƒÖd inicjacji sesji: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'success') {
        throw new Error(data.message || 'B≈ÇƒÖd inicjacji sesji');
      }
      
      const session = data.session;
      console.log("‚úÖ Nowa sesja utworzona:", session.token?.substring(0, 10) + '...');
      
      // NOWE: Automatycznie rozpocznij wymianƒô kluczy dla nowej sesji
      if (session.needs_key_exchange) {
        console.log('üîë Auto-start wymiany kluczy dla nowej sesji...');
        setTimeout(() => {
          this.startAutomaticKeyExchange(session.token, session);
        }, 500);
      }
      
      // Aktualizuj listy
      await this.getActiveSessions();
      
      return {
        status: 'success',
        session_token: session.token,
        session: session,
        isExisting: false
      };
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd inicjacji sesji:', error);
      return {
        status: 'error',
        message: error.message
      };
    }
  }

/**
   * Pobieranie aktywnych sesji
   */
  async getActiveSessions() {
    try {
      if (!this.user.id) {
        throw new Error("U≈ºytkownik nie jest zalogowany");
      }
      
      const response = await fetch('/api/sessions/active', {
        headers: { 'X-Requested-With': 'XMLHttpRequest' },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`B≈ÇƒÖd pobierania sesji: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'success') {
        throw new Error(data.message || 'B≈ÇƒÖd pobierania sesji');
      }
      
      this.activeSessions = data.sessions;
      
      if (this.onSessionsUpdated) {
        this.onSessionsUpdated(this.activeSessions);
      }
      
      return {
        status: 'success',
        sessions: this.activeSessions
      };
    } catch (error) {
      console.error('B≈ÇƒÖd pobierania aktywnych sesji:', error);
      return {
        status: 'error',
        message: error.message
      };
    }
  }

  /**
   * Pobieranie klucza sesji z UnifiedCrypto
   */
  async retrieveSessionKey(sessionToken) {
    try {
      if (!window.unifiedCrypto) {
        throw new Error('UnifiedCrypto nie jest dostƒôpny');
      }

      if (!window.unifiedCrypto.hasPrivateKey()) {
        throw new Error('Brak klucza prywatnego');
      }

      const response = await fetch(`/api/session/${sessionToken}/key`, {
        headers: { 'X-Requested-With': 'XMLHttpRequest' },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`B≈ÇƒÖd pobierania klucza sesji: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'success') {
        throw new Error(data.message || 'B≈ÇƒÖd pobierania klucza sesji');
      }
      
      const sessionKeyBase64 = await window.unifiedCrypto.decryptSessionKey(data.encrypted_key);
      window.unifiedCrypto.storeSessionKey(sessionToken, sessionKeyBase64);
      
      // Potwierd≈∫ odebranie klucza
      await fetch(`/api/session/${sessionToken}/acknowledge_key`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin'
      });
      
      return {
        success: true,
        message: 'Klucz sesji odebrany i potwierdzony'
      };
    } catch (error) {
      console.error('B≈ÇƒÖd pobierania klucza sesji:', error);
      return {
        success: false,
        message: error.message
      };
    }
  }

  /**
   * Wysy≈Çanie wiadomo≈õci z szyfrowaniem
   */
  async sendMessage(sessionToken, content) {
    try {
      console.log('üöÄ Wysy≈Çanie wiadomo≈õci...');
      
      if (!window.unifiedCrypto) {
        throw new Error('UnifiedCrypto nie jest dostƒôpny');
      }

      const sessionKeyBase64 = window.unifiedCrypto.getSessionKey(sessionToken);
      if (!sessionKeyBase64) {
        throw new Error('Brak klucza sesji');
      }
      
      const session = this.activeSessions.find(s => s.token === sessionToken);
      if (!session || !session.other_user?.user_id) {
        throw new Error('Nie znaleziono sesji');
      }
      
      // Szyfrowanie
      const sessionKey = await window.unifiedCrypto.importSessionKey(sessionKeyBase64);
      const encryptedData = await window.unifiedCrypto.encryptMessage(sessionKey, content);
      
      const payload = {
        session_token: sessionToken,
        recipient_id: parseInt(session.other_user.user_id),
        content: encryptedData.data,
        iv: encryptedData.iv
      };
      
      const response = await fetch('/api/message/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify(payload)
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`B≈ÇƒÖd serwera: ${errorText}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'success') {
        throw new Error(data.message || 'API zwr√≥ci≈Ço b≈ÇƒÖd');
      }
      
      // Dodaj do lokalnego stanu
      const newMessage = {
        id: data.message?.id || Date.now().toString(),
        sender_id: parseInt(this.user.id),
        content: content,
        timestamp: data.message?.timestamp || new Date().toISOString(),
        is_mine: true
      };
      
      await this.storeMessage(sessionToken, newMessage);
      
      console.log('‚úÖ Wiadomo≈õƒá wys≈Çana!');
      
      return {
        status: 'success',
        message: 'Wiadomo≈õƒá wys≈Çana',
        messageData: newMessage
      };
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd wysy≈Çania wiadomo≈õci:', error);
      return {
        status: 'error',
        message: error.message
      };
    }
  }

  /**
   * Inicjalizuje bazƒô danych IndexedDB
   */
  async initDatabase() {
    try {
      const request = indexedDB.open('SecureChatMessages', 1);
      
      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        if (!db.objectStoreNames.contains('messages')) {
          db.createObjectStore('messages', { keyPath: 'id', autoIncrement: true });
        }
        if (!db.objectStoreNames.contains('sessions')) {
          db.createObjectStore('sessions', { keyPath: 'token' });
        }
      };
      
      request.onsuccess = (event) => {
        this.db = event.target.result;
        console.log("Baza danych IndexedDB zainicjalizowana");
        this.loadMessagesFromStorage();
      };
      
      request.onerror = (event) => {
        console.error('B≈ÇƒÖd inicjalizacji IndexedDB:', event.target.error);
      };
    } catch (error) {
      console.error('Nie mo≈ºna utworzyƒá bazy danych:', error);
    }
  }

  /**
   * Pobieranie wiadomo≈õci z lokalnego magazynu
   */
  async loadMessagesFromStorage() {
    if (!this.db) {
      console.error("Baza danych nie jest dostƒôpna");
      return;
    }
    
    try {
      const tx = this.db.transaction(['messages'], 'readonly');
      const store = tx.objectStore('messages');
      const messages = await new Promise((resolve, reject) => {
        const request = store.getAll();
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
      });
      
      // Grupuj wiadomo≈õci wed≈Çug sesji
      messages.forEach(message => {
        const sessionToken = message.sessionToken;
        if (!this.messages[sessionToken]) {
          this.messages[sessionToken] = [];
        }
        this.messages[sessionToken].push(message);
      });
      
      console.log(`Za≈Çadowano wiadomo≈õci dla ${Object.keys(this.messages).length} sesji`);
    } catch (error) {
      console.error('B≈ÇƒÖd podczas ≈Çadowania wiadomo≈õci:', error);
    }
  }

  /**
   * Zapisywanie wiadomo≈õci do lokalnego magazynu
   */
  async storeMessage(sessionToken, message) {
    if (!this.db) {
      console.error("Baza danych nie jest dostƒôpna");
      return false;
    }
    
    try {
      // Dodaj wiadomo≈õƒá do lokalnego stanu
      if (!this.messages[sessionToken]) {
        this.messages[sessionToken] = [];
      }
      
      // Sprawd≈∫ czy wiadomo≈õƒá ju≈º nie istnieje (unikaj duplikat√≥w)
      const exists = this.messages[sessionToken].find(m => 
        m.id === message.id || 
        (m.timestamp === message.timestamp && m.content === message.content && m.sender_id === message.sender_id)
      );
      
      if (exists) {
        console.log("üìù Wiadomo≈õƒá ju≈º istnieje, pomijam duplikat");
        return true;
      }
      
      this.messages[sessionToken].push(message);
      
      // Zapisz do IndexedDB
      const tx = this.db.transaction(['messages'], 'readwrite');
      const store = tx.objectStore('messages');
      
      await new Promise((resolve, reject) => {
        const request = store.add({
          ...message,
          sessionToken: sessionToken
        });
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
      });
      
      console.log("üíæ Wiadomo≈õƒá zapisana:", message.content?.substring(0, 50) + "...");
      return true;
    } catch (error) {
      console.error('B≈ÇƒÖd zapisywania wiadomo≈õci:', error);
      return false;
    }
  }

  /**
   * Pobieranie lokalnych wiadomo≈õci
   */
  getLocalMessages(sessionToken) {
    console.log('üì• getLocalMessages dla:', sessionToken);
    
    if (!sessionToken) {
      return {
        status: 'error',
        message: 'Brak tokenu sesji',
        messages: []
      };
    }
    
    if (!this.messages[sessionToken]) {
      return {
        status: 'success',
        messages: []
      };
    }
    
    const messages = this.messages[sessionToken];
    const sortedMessages = messages.sort((a, b) => {
      const timeA = new Date(a.timestamp).getTime();
      const timeB = new Date(b.timestamp).getTime();
      return timeA - timeB;
    });
    
    return {
      status: 'success',
      messages: sortedMessages
    };
  }

/**
   * Pobieranie wiadomo≈õci z serwera z deszyfrowaniem
   */
  async fetchMessagesFromServer(sessionToken) {
    try {
      console.log('üåê Pobieranie wiadomo≈õci z serwera dla:', sessionToken);
      
      const response = await fetch(`/api/messages/${sessionToken}`, {
        headers: { 'X-Requested-With': 'XMLHttpRequest' },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'success') {
        throw new Error(data.message || 'B≈ÇƒÖd pobierania wiadomo≈õci');
      }
      
      // Odszyfruj wiadomo≈õci je≈õli sƒÖ zaszyfrowane
      const decryptedMessages = [];
      
      for (const message of data.messages || []) {
        try {
          if (message.content && message.iv && window.unifiedCrypto) {
            const sessionKeyBase64 = window.unifiedCrypto.getSessionKey(sessionToken);
            if (sessionKeyBase64) {
              const sessionKey = await window.unifiedCrypto.importSessionKey(sessionKeyBase64);
              const decryptedContent = await window.unifiedCrypto.decryptMessage(sessionKey, {
                data: message.content,
                iv: message.iv
              });
              
              message.content = decryptedContent;
            }
          }
          
          decryptedMessages.push(message);
        } catch (decryptError) {
          console.error('‚ùå B≈ÇƒÖd deszyfrowania wiadomo≈õci:', decryptError);
          decryptedMessages.push({
            ...message,
            content: '[Nie mo≈ºna odszyfrowaƒá wiadomo≈õci]',
            decryption_error: true
          });
        }
      }
      
      console.log(`‚úÖ Pobrano i odszyfrowano ${decryptedMessages.length} wiadomo≈õci`);
      
      return {
        status: 'success',
        messages: decryptedMessages
      };
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd pobierania wiadomo≈õci z serwera:', error);
      return {
        status: 'error',
        message: error.message,
        messages: []
      };
    }
  }

  /**
   * Pobieranie listy znajomych
   */
  async fetchFriends() {
    try {
      const response = await fetch('/api/friends', {
        headers: { 'X-Requested-With': 'XMLHttpRequest' },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`B≈ÇƒÖd pobierania znajomych: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status !== 'success') {
        throw new Error(data.message || 'B≈ÇƒÖd pobierania znajomych');
      }
      
      this.friends = data.friends;
      
      if (this.onFriendsUpdated) {
        this.onFriendsUpdated(this.friends);
      }
      
      return {
        status: 'success',
        friends: this.friends
      };
    } catch (error) {
      console.error('B≈ÇƒÖd pobierania znajomych:', error);
      return {
        status: 'error',
        message: error.message
      };
    }
  }

  /**
   * Aktualizacja statusu online u≈ºytkownika
   */
  updateOnlineStatus(userId, isOnline) {
    if (isOnline) {
      if (!this.onlineUsers.includes(userId)) {
        this.onlineUsers.push(userId);
      }
    } else {
      this.onlineUsers = this.onlineUsers.filter(id => id !== userId);
    }
    
    // Zaktualizuj status znajomych
    this.friends = this.friends.map(friend => {
      if (friend.user_id === userId) {
        return { ...friend, is_online: isOnline };
      }
      return friend;
    });
    
    if (this.onOnlineStatusChanged) {
      this.onOnlineStatusChanged(this.onlineUsers);
    }
  }

  /**
   * Wysy≈Ça zaproszenie do znajomych
   */
  async sendFriendRequest(username) {
    try {
      if (!username || !username.trim()) {
        throw new Error('Podaj nazwƒô u≈ºytkownika');
      }
      
      if (!this.user.id) {
        throw new Error('U≈ºytkownik nie jest zalogowany');
      }
      
      const response = await fetch('/api/friend_requests', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ username: username.trim() })
      });
      
      if (!response.ok) {
        throw new Error(`B≈ÇƒÖd HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status === 'success') {
        await this.fetchFriends();
        
        return {
          success: true,
          message: data.message || 'Zaproszenie wys≈Çane pomy≈õlnie'
        };
      } else {
        throw new Error(data.message || 'B≈ÇƒÖd wysy≈Çania zaproszenia');
      }
    } catch (error) {
      console.error('B≈ÇƒÖd wysy≈Çania zaproszenia:', error);
      
      return {
        success: false,
        message: error.message
      };
    }
  }
  
  /**
   * Pobiera oczekujƒÖce zaproszenia do znajomych
   */
  async getPendingFriendRequests() {
    try {
      const response = await fetch('/api/friend_requests/pending', {
        headers: { 'X-Requested-With': 'XMLHttpRequest' },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`B≈ÇƒÖd HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status === 'success') {
        return {
          success: true,
          requests: data.requests || []
        };
      } else {
        throw new Error(data.message || 'B≈ÇƒÖd pobierania zaprosze≈Ñ');
      }
    } catch (error) {
      console.error('B≈ÇƒÖd pobierania zaprosze≈Ñ:', error);
      
      return {
        success: false,
        message: error.message,
        requests: []
      };
    }
  }
  
  /**
   * Akceptuje zaproszenie do znajomych
   */
  async acceptFriendRequest(requestId) {
    try {
      const response = await fetch(`/api/friend_requests/${requestId}/accept`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin'
      });
      
      if (!response.ok) {
        throw new Error(`B≈ÇƒÖd HTTP: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.status === 'success') {
        await this.fetchFriends();
        
        return {
          success: true,
          message: data.message || 'Zaproszenie zaakceptowane'
        };
      } else {
        throw new Error(data.message || 'B≈ÇƒÖd akceptacji zaproszenia');
      }
    } catch (error) {
      console.error('B≈ÇƒÖd akceptacji zaproszenia:', error);
      
      return {
        success: false,
        message: error.message
      };
    }
  }

  /**
   * Wylogowanie u≈ºytkownika
   */
  async logout() {
    try {
      console.log('üö™ Rozpoczynam wylogowanie...');
      
      // 1. Wyczy≈õƒá klucze kryptograficzne
      if (window.unifiedCrypto) {
        window.unifiedCrypto.clearAllKeys();
        console.log('üîë Klucze kryptograficzne wyczyszczone');
      }
      
      // 2. Roz≈ÇƒÖcz Socket.IO
      if (window.wsHandler) {
        window.wsHandler.disconnect();
        console.log('üîå Socket.IO roz≈ÇƒÖczony');
      }
      
      // 3. Wyczy≈õƒá dane lokalne
      localStorage.clear();
      sessionStorage.clear();
      console.log('üíæ Pamiƒôƒá lokalna wyczyszczona');
      
      // 4. Wyczy≈õƒá lokalne dane aplikacji
      this.activeSessions = [];
      this.friends = [];
      this.messages = {};
      this.keyExchangeInProgress.clear();
      
      // 5. Zamknij bazƒô danych
      if (this.db) {
        this.db.close();
        console.log('üóÑÔ∏è Baza danych zamkniƒôta');
      }
      
      // 6. Ma≈Çe op√≥≈∫nienie ≈ºeby wszystko siƒô wykona≈Ço
      await new Promise(resolve => setTimeout(resolve, 500));
      
      console.log('‚úÖ Wylogowanie zako≈Ñczone, przekierowujƒô...');
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd podczas wylogowania:', error);
    } finally {
      // 7. ZAWSZE przekieruj na endpoint logout
      console.log('üîÑ Przekierowanie na /logout...');
      window.location.href = '/logout';
    }
  }
}

// Inicjalizacja globalnego SessionManager
try {
  window.sessionManager = new SecureSessionManager();
  console.log("‚úÖ SecureSessionManager zainicjalizowany pomy≈õlnie");
} catch (error) {
  console.error("‚ùå B≈ÇƒÖd inicjalizacji SecureSessionManager:", error);
  
  // Fallback - spr√≥buj ponownie po chwili
  setTimeout(() => {
    try {
      window.sessionManager = new SecureSessionManager();
      console.log("‚úÖ SecureSessionManager zainicjalizowany (retry)");
    } catch (retryError) {
      console.error("‚ùå Ponowny b≈ÇƒÖd SecureSessionManager:", retryError);
    }
  }, 1000);
}

